#############################################################################
# A minimal rTorrent configuration that provides the basic features
# you want to have in addition to the built-in defaults.
#
# See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
# for an up-to-date version.
#############################################################################

# Instance layout (base paths)
method.insert = cfg.home,      private|const|string, (cat,"/mnt/Storage/Media/")
method.insert = cfg.basedir,   private|const|string, (cat,(cfg.home), ".rtorrent/")
method.insert = cfg.logs,      private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.logfile,   private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
method.insert = cfg.session,   private|const|string, (cat,(cfg.basedir),".session/")
method.insert = cfg.watch,     private|const|string, (cat,(cfg.home),"watch/")
method.insert = cfg.rpcsocket, private|const|string, "/srv/rtorrent/rpc.socket"

# Create instance directories
execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.basedir),"\" ",\
    "\"",(cfg.logs),"\" ",\
    "\"",(cfg.session),"\" ")


# Listening port for incoming peer traffic (fixed; you can also randomize it)
network.port_range.set = 30000-60000
network.port_random.set = yes


# Tracker-less torrent and UDP tracker support
# (conservative settings for 'private' trackers, change for 'public')
dht.mode.set = on
protocol.pex.set = yes
trackers.use_udp.set = yes

# Adding public DHT servers for easy bootstrapping
schedule2 = dht_node_1, 5, 0, "dht.add_node=router.utorrent.com:6881"
schedule2 = dht_node_2, 5, 0, "dht.add_node=dht.transmissionbt.com:6881"
schedule2 = dht_node_3, 5, 0, "dht.add_node=router.bitcomet.com:6881"
schedule2 = dht_node_4, 5, 0, "dht.add_node=dht.aelitis.com:6881"

# Peer settings
throttle.max_uploads.set = 1000
throttle.max_uploads.global.set = 2500

throttle.min_peers.normal.set = 200
throttle.max_peers.normal.set = 600
throttle.min_peers.seed.set = 300
throttle.max_peers.seed.set = 800
trackers.numwant.set = 800

protocol.encryption.set = allow_incoming,try_outgoing,enable_retry


# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300


# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
pieces.memory.max.set = 2048M
network.xmlrpc.size_limit.set = 8M


# Basic operational settings (no need to change these)
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.home))
log.execute = (cat, (cfg.logs), "execute.log")
#log.xmlrpc = (cat, (cfg.logs), "xmlrpc.log")
execute.nothrow = sh, -c, (cat, "echo >",\
    (session.path), "rtorrent.pid", " ",(system.pid))


# Other operational settings (check & adapt)
encoding.add = utf8
system.umask.set = 0027
system.cwd.set = (directory.default)
network.http.dns_cache_timeout.set = 25
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))
#pieces.hash.on_completion.set = no
#view.sort_current = seeding, greater=d.ratio=
#keys.layout.set = qwerty
#network.http.capath.set = "/etc/ssl/certs"
#network.http.ssl_verify_peer.set = 0
#network.http.ssl_verify_host.set = 0


# Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
        (cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"


# Watch directories (add more as you like, but use unique schedule names)
method.insert = watch_for_torrent, simple, (cat, \
		"load.start_verbose=", (cfg.watch), (argument.0), "/*.torrent",\
		",d.directory.set=", (cfg.home), (argument.0),\
		",d.custom1.set=", (argument.0))

schedule2 = watchForAnime, 0, 10, ((watch_for_torrent, "Anime"))
schedule2 = watchForMisc, 0, 10, ((watch_for_torrent, "Misc"))
schedule2 = watchForMovies, 0, 10, ((watch_for_torrent, "Movies"))
schedule2 = watchForTVShows, 0, 10, ((watch_for_torrent, "TV-Shows"))

# Run the rTorrent process as a daemon in the background
# (and control via XMLRPC sockets)
#system.daemon.set = true
network.scgi.open_local = (cfg.rpcsocket)
#execute.nothrow = chmod,770,(cfg.rpcsocket)
execute.nothrow = chmod,777,(cfg.rpcsocket)


# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat, "Logging to ", (cfg.logfile))
log.open_file = "log", (cfg.logfile)
#log.add_output = "info", "log"
log.add_output = "critical", "log"
log.add_output = "error", "log"
log.add_output = "warn", "log"
#log.add_output = "notice", "log"
#log.add_output = "debug", "log"
#log.add_output = "tracker_debug", "log"

# UI
schedule2 = filter_active,30,30,"view.filter = active,\"or={d.up.rate=,d.down.rate=}\""
